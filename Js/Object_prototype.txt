1.Object.assign()   ---   用于将所有可枚举属性的值从一个或多个源对象复制到目标对象,它将返回目标对象
	const target = { a: 1, b: 2 };
	const source = { b: 4, c: 5 };
	const returnedTarget = Object.assign(target, source);
	console.log(target);	// { a: 1, b: 4, c: 5 }
	console.log(returnedTarget);		// { a: 1, b: 4, c: 5 }
	console.log(target === returnedTarget);		// true
Object.assign()拷贝的是属性值,如果源对象的属性值是一个对象的引用,那么它也只指向那个引用
	let obj = { a: 0 , b: { c: 0}}; 
	let obj1 = Object.assign({}, obj); 
	obj1.b.c = 3; 
	console.log(JSON.stringify(obj)); // { a: 1, b: { c: 3}} 
	console.log(JSON.stringify(obj1)); // { a: 2, b: { c: 3}} 
 使用let obj2 = JSON.parse(JSON.stringify(obj)); 后修改obj的值不会影响到obj2





2.Object.create()   -----   创建一个新对象, 使新创建的对象的__proto__指向现有的原型对象







3.Object.defineProperties() ----- 







4.Object.defineProperty()   ----- 







5.Object.entries()   ----- 

6.Object.keys()   ----- 返回一个由传入对象的可枚举属性组成的数组,数组名的排列顺序和使用for...in...循环遍历该对象返回的顺序一致
	区别： for...in....循环还会枚举其原型链上的属性
//Array
var  a=["a","b","c"]
Object.keys(a)       // ["0","1","2"]

//Object
var obj={a:1,b:2,c:3}
Object.keys(obj)    // ["a","b","c"]





7.Object.freeze()   ----- 







8.Object.fromEntries()   ----- 









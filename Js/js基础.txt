
1. 浏览器内核分类:

   Trident, Gecko,  Presto,  Webkit

2. mouseenter和mouseover的区别 ?
   
   当鼠标指针穿过被选元素或其子元素时,都会触发mouseover事件,对应为mouseout;
   只有在鼠标指针穿过被选元素时,才会触发mouserenter事件, 对应为mouseleave.


3. 用正则表达式匹配字符串，以字母开头，后面是数字、字符串或者下划线，长度为 9 - 20

     var re = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{9,20}$");

     手机号校验:
      let phone = document.getElementById('phone').value;
      if(!(/^1(3|4|5|7|8)\d{9}$/.test(phone))){
	alert("phone number is error")
      }


4.  哪些操作会造成内存泄漏 ?

     指任何对象在您不在拥有或需要它之后仍然存在
      setTimeout的第一个参数使用字符串而非函数的话,会引发内存泄露
      闭包、控制台日志、循环(在两个对象彼此引用且彼此保留时,就会产生一个循环)
 
5.  eval()的作用?

      eval()函数会将传入的字符串当作Js代码进行执行
      console.log(eval(new String('2 + 2')));
      // expected output: 2 + 2

6.  alert(1 && 2) 和 alert(1 || 0) 的结果是 ？

    只要 “&&” 前面是 false，无论 “&&” 后面是 true 还是 false，结果都将返 “&&” 前面的值;
    只要 “&&” 前面是 true，无论 “&&” 后面是 true 还是 false，结果都将返 “&&” 后面的值;
    只要 “||” 前面为 false，不管 “||” 后面是 true 还是 false，都返回 “||” 后面的值;
    只要 “||” 前面为 true，不管 “||” 后面是 true 还是 false，都返回 “||” 前面的值.

7.  null & undefined的区别 ?

     null用来表示尚未存在的对象,常用来表示函数企图返回一个不存在的对象,null表示"没有对象",即该处不应该有值
     null典型用法:  1> 作为函数的参数, 表示该函数的参数不是对象.
                              2> 作为对象原型链的终点.

     当申明的变量还没有被初始化时,变量的默认值为undefined, undefined表示 "缺少值",就是此处应该有一个值,但是还没有定义.
	1> 变量申明了,但没有被赋值,就等于 undefined.
	2> 调用函数时,应该提供的参数没有提供,该参数等于 undefined.
	3> 对象没有赋值的属性,


8. 异步过程的构成要素有哪些？

       一个异步过程通常是这样的:
                 1> 主线程发起一个异步请求,相应的工作线程接收请求并告知主线程已收到(异步函数返回)
	 2> 主线程可以继续执行后面的代码,同时工作线程执行异步任务
                 3> 工作线程完成工作后,通知主线程
	 4>  主线程收到通知后, 执行一定的动作(调用回调函数)

	异步函数通常具有以下的形式：A(args..., callbackFn)。
	它可以叫做异步过程的发起函数，或者叫做异步任务注册函数。
	args 和 callbackFn 是这个函数的参数。

9.  session 与 cookie 的区别

	1> session 保存在服务器，客户端不知道其中的信息；
	2> cookie 保存在客户端，服务器能够知道其中的信息。 
	3> session 中保存的是对象，cookie 中保存的是字符串。   
	4> session 不能区分路径，同一个用户在访问一个网站期间，所有的 session 在任何一个地方都可以访问到。
	       而 cookie 中如果设置了路径参数，那么同一个网站中不同路径下的 cookie 互相是访问不到的。
      
	5> cookies 是一些存储在用户电脑上的小文件。
	6> 它是被设计用来保存一些站点的用户数据，这样能够让服务器为这样的用户定制内容，后者页面代码能够获取到 cookie 值然后发送给服务器。
	     比如 cookie 中存储了所在地理位置，以后每次进入地图就默认定位到改地点即可。


10.  请描述一下 cookies，sessionStorage 和 localStorage 的区别

共同点:

	都是保存在浏览器端，且同源的。
区别:

	cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。
	而 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。
	cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下。
	存储大小限制也不同，cookie 数据不能超过 4k，同时因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如会话标识。
	sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。
	数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。
	作用域不同，sessionStorage 在不同的浏览器窗口中不共享，即使是同一个页面；cookie 和 localStorage 在所有同源窗口中都是共享的。


11.   document.write 和 innerHTML 的区别

      innerHTML 将内容写入某个 DOM 节点，不会导致页面全部重绘。
      innerHTML 很多情况下都优于 document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。
      document.write 是重写整个 document, 写入内容是字符串的 html；innerHTML 是 HTMLElement 的属性，是一个元素的内部 html 内容 


12.  HOC 及作用?

              高阶组件是重用组件逻辑的高级方法，是一种源于 React 的组件模式。 HOC 是自定义组件，在它之内包含另一个组件。它们可以接受子组件提供的任何动态，但不会修改或复制其输入组件中的任何行为。
      你可以认为 HOC 是“纯（Pure）”组件

      .  代码重用, 逻辑和引导抽象
      .  渲染劫持
      .  状态抽象和控制
      .  props控制


13.  js时单线程,怎样执行异步代码?

              单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。
       js 引擎执行异步代码而不用等待，是因有为有 消息队列和事件循环。

      消息队列：消息队列是一个先进先出的队列，它里面存放着各种消息。
      事件循环：事件循环是指主线程重复从消息队列中取消息、执行的过程。
           实际上，主线程只会做一件事情，就是从消息队列里面取消息、执行消息，再取消息、再执行。当消息队列为空时，就会等待直到消息队列变成非空。而且主线程只有在将当前的消息执行完成后，才会去取
     下一个消息。这种机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。



  
